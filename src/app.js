const Ractive = require('ractive');

// Ractive.DEBUG и Ractive.DEBUG_PROMISES с помощью которых мы включаем или выключаем информационные сообщения
// об ошибках в зависимости от текущего окружения.
Ractive.DEBUG = (process.env.NODE_ENV === 'development');
Ractive.DEBUG_PROMISES = Ractive.DEBUG;

// 1) флаг Ractive.defaults.enhance, активирующий один из ключевых аспектов изоморфности — переиспользование
// разметки полученный в результате SSR на клиентской стороне.
// Именно это сейчас чаще всего называют непонятным термином hydrate.

// 1.1) Если по-простому, то фишка в том, что после того, как приложение инициализируется на клиенте оно может «захотеть»
// перерендерить всю разметку взамен той разметки, которая пришла с сервера (SSR).
// Не то чтобы это супер плохо для изоморфности — поддержку SEO и многие другие плюшки мы все равно получаем.
// Однако в любом случае это крайне нерационально.

// 1.2) Поэтому важно не просто уметь делать SSR (это сейчас умеют многие).
// Хорошо еще когда ваш фреймворк умеет делать эту самую «гидрацию»,
// т.е. может проанализировать текущую разметку и данные, чтобы понять,
// что результатом повторного рендера приложения или отдельных его компонентов будет та же самая разметка,
// а значит делать этого не нужно (либо нужно, но частично). Далее, просто «оживить» существующую разметку,
// т.е. «навесить» все необходимые ивент-лисенеры, хендлеры или чего там еще ему надо.

// Все это с относительно недавнего времени умеют все представители «большой тройки».
// Ractive научился этому еще раньше, именно поэтому использует свой собственный термин «enhance»,
// вместо введенного реактом «hydrate». Просто не было тогда еще такого термина.

// По-умолчанию, этот флаг выставлен в false и данная строка кода активирует сею возможность сразу для всех
// компонентов Ractive. Другими словами, одной строчкой кода можно сделать так, чтобы ваше приложение на Ractive
// стало переиспользовать разметку с сервера. В то же время, если какой-то отдельный компонент вдруг не требует
// «гидрации», ее можно отключить локально через его опции.
Ractive.defaults.enhance = true;

// Ractive.defaults.lazy говорит фреймверку использовать поздние DOM-события (change, blur),
// вместо немедленно исполняемых (keyup, keydown) для two-way bindings (да-да, двойное связывание рулит).
Ractive.defaults.lazy = true;

// Ractive.defaults.sanitize позволяет на этапе парсинга шаблонов вырезать небезопасные html-теги.
Ractive.defaults.sanitize = true;

// Если вы ненавидите или боитесь двойного связывания, данная проблема решается в Ractive одной строкой:
// Ractive.defaults.twoway = false;

// Подключение роутинга для изоморфного приложения
Ractive.use(require('ractive-page')({
  meta: require('../config/meta.json')
}));

const options = {
  el: '#app',
  template: require('./templates/app.html'),
  partials: {
    navbar: require('./templates/navbar.html'),
    footer: require('./templates/footer.html')
  },
  transitions: {
    fade: require('ractive-transitions-fade'),
  },
  data: {
    message: 'Hello world',
    firstName: 'Aliasksei',
    lastName: 'Kalesnikau'
  },
  computed: {
    fullName() {
      return this.get('firstName') + ' ' + this.get('lastName');
    }
  }
};

module.exports = () => new Ractive(options);
